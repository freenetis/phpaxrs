<?php

/*
 * This file is a part of PHPAX-RS framework, released under terms of GPL-3.0 
 * licence. Copyright (c) 2014, UnArt Slavičín, o.s. All rights reserved.
 */

namespace phpaxrs;

use \phpaxrs\http\ResponseBuilder;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-05 at 09:40:23.
 */
class PhpaxRsTest extends \PHPUnit_Framework_TestCase {
    
    /**
     * For calling private and protected methods
     * 
     * @param string $name
     * @return \ReflectionMethod
     */
    protected static function call($obj, $name) {
        $class = new \ReflectionClass($obj);
        $method = $class->getMethod($name);
        $method->setAccessible(true);
        $args = func_get_args();
        array_shift($args);
        array_shift($args);
        return $method->invokeArgs($obj, $args);
    }
    
    /**
     * @var PhpaxRs
     */
    private $api;

    protected function setUp() {
        $this->api = new PhpaxRs('/freenetis-dev/api');
        $this->api->add_endpoint('/example', 'phpaxrs\ExampleEndpoint');
        $this->api->add_endpoint('/example/second', 'phpaxrs\Example2Endpoint');
        $this->api->add_serializator('application/json', 'phpaxrs\serializator\JsonSerializator');
        $this->api->add_serializator('text/plain', 'phpaxrs\ExampleTextSerializator');
    }

    protected function tearDown() {
    }
    
    public function providerTestServe() {
        $jsr = new \phpaxrs\serializator\JsonSerializator();
        $bp = 'http://localhost/freenetis-dev/api';
        $json = 'application/json';
        $hd = array('Accept' => $json);
        return array(
            array($bp . '/example', 'GET', $hd, 200, $json,
                $jsr->marshall(ExampleEndpoint::$DATA)),
            array($bp . '/example/1', 'GET', array('Accept' => 'text/plain'),
                200, 'text/plain', ExampleEndpoint::$DATA[1]),
            array($bp . '/example/1', 'GET', array('Accept' => 'text/*'),
                200, 'text/plain', ExampleEndpoint::$DATA[1]),
            array($bp . '/example/1', 'GET', array('Accept' => '*/*'),
                200, 'text/plain', ExampleEndpoint::$DATA[1]),
            array($bp . '/example/2', 'GET', $hd, 406, NULL, NULL),
            array($bp . '/example/2', 'GET', array('Accept' => 'text/plain'), 404, NULL, NULL),
            array($bp . '/eexample/2', 'GET', $hd, 404, NULL, NULL),
            array($bp . '/example', 'DELETE', $hd, 404, NULL, NULL),
            array($bp . '/example/1', 'POST', $hd, 404, NULL, NULL),
            array($bp . '/example/123', 'DELETE', $hd, 404, NULL, NULL),
        );
    }
    
    private function make_request($path, $method, $headers, $rs, $ct, $body, $send_data = NULL) {
        $request = new http\HttpRequest($path, $method, $send_data, $headers);
        $response = $this->api->serve_request($request);
        // check response
        $this->assertEquals($rs, $response->get_status(), 'status is different' . print_r($response, true));
        if ($rs < 400) { // do not test on error
            $headers = $response->get_headers();
            $this->assertEquals($ct, @$headers['Content-Type']);
            $this->assertEquals($body, $response->get_body());
        }
    }
    
    /**
     * @dataProvider providerTestServe
     */
    public function testServe($path, $method, $headers, $rs, $ct, $body) {
        $this->make_request($path, $method, $headers, $rs, $ct, $body);
    }
    
    public function testComplex() {
        $jsr = new \phpaxrs\serializator\JsonSerializator();
        $bp = 'http://localhost/freenetis-dev/api/example/';
        $json = 'application/json';
        $hd = array(
            'Accept' => $json
        );
        // check count
        $this->make_request($bp . '/count', 'GET', array(
            'Accept' => 'text/plain'
        ), 200, 'text/plain', '2');
        // create
        $this->make_request($bp, 'POST', array(
            'Accept' => $json,
            'Content-Type' => $json
        ), 200, NULL, NULL, $jsr->marshall(array('id' => '11', 'name' => 'ahoj')));
        // check count
        $this->make_request($bp . '/count', 'GET', array(
            'Accept' => 'text/*'
        ), 200, 'text/plain', '3');
        // edit
        $this->make_request($bp, 'PUT', array(
            'Accept' => $json,
            'Content-Type' => $json
        ), 200, $json, $jsr->marshall(array('id' => '11', 'name' => 'ahoj2')),
                $jsr->marshall(array('id' => '11', 'name' => 'ahoj2')));
        // delete
        $this->make_request($bp . '/11', 'DELETE', NULL, 200, NULL, NULL);
        // check count
        $this->make_request($bp . '/count', 'GET', array(
            'Accept' => 'text/plain'
        ), 200, 'text/plain', '2');
        // add multiple
        $this->make_request($bp . '/multiple', 'POST', array(
            'Accept' => $json,
            'Content-Type' => $json
        ), 200, NULL, NULL, $jsr->marshall(array(array('id' => '23', 'name' => 'FFF'))));
        // check count
        $this->make_request($bp . '/count', 'GET', array(
            'Accept' => 'text/plain'
        ), 200, 'text/plain', '3');
    }
    
    public function providerFind_end_point() {
        return array(
            array('/example', true),
            array('/example/multiple', true),
            array('/example/', true),
            array('/example/2', true),
            array('/example/asac/', true),
            array('example', true),
            array('/example2', false),
            array('example2/', false),
            array('/exampl', false),
            array('/exampl/e', false),
            array('/exampl/e/', false),
            array('/example/second/aaa/3/example', true)
        );
    }

    /**
     * @covers PhpaxRs::find_end_point
     * @dataProvider providerFind_end_point
     */
    public function testFind_end_point($path, $found) {
        $this->assertEquals($found, self::call($this->api, 'find_end_point', $path) != NULL);
    }
    
    /**
     * @covers PhpaxRs::get_endpoint_methods
     * @covers PhpaxRs::filter_endpoint_methods_by_path
     */
    public function testMethods() {
        $ep = new \ReflectionClass('phpaxrs\ExampleEndpoint');
        // test @GET
        $gep_methods = self::call($this->api, 'get_endpoint_methods', $ep, 'GET');
        $this->assertEquals(3, count($gep_methods));
        $this->assertEquals('get_all', $gep_methods[0]['rm']->getName());
        $this->assertEquals('get_item', $gep_methods[1]['rm']->getName());
        $this->assertEquals('count', $gep_methods[2]['rm']->getName());
        // test @DELETE
        $dep_methods = self::call($this->api, 'get_endpoint_methods', $ep, 'DELETE');
        $this->assertEquals(1, count($dep_methods));
        $this->assertEquals('delete_item', $dep_methods[0]['rm']->getName());
        // filter for "/" path
        $fms = array_merge(array(), $gep_methods);
        $fms = self::call($this->api, 'filter_endpoint_methods_by_path', $fms, '/');
        $this->assertEquals(1, count($fms));
        $this->assertEquals('get_all', $fms[0]['rm']->getName());
        // filter for "/11" path
        $fms2 = array_merge(array(), $gep_methods);
        $fms2 = self::call($this->api, 'filter_endpoint_methods_by_path', $fms2, '/11');
        $this->assertEquals(1, count($fms2));
        $first_fms2 = reset($fms2);
        $this->assertEquals('get_item', $first_fms2['rm']->getName());
        $this->assertEquals(1, count($first_fms2['args']));
        $this->assertEquals('11', $first_fms2['args'][0]);
        // filter for "/11aa" path with DELETE
        $fms3 = array_merge(array(), $dep_methods);
        $fms3 = self::call($this->api, 'filter_endpoint_methods_by_path', $fms3, '/11aa');
        $this->assertEquals(1, count($fms3));
        $this->assertEquals('delete_item', $fms3[0]['rm']->getName());
        $this->assertEquals(1, count($fms3[0]['args']));
        $this->assertEquals('11aa', $fms3[0]['args'][0]);
    }
    
}

/**
 * @Consumes(application/json)
 * @Produces(application/json)
 */
class ExampleEndpoint {
    
    public static $DATA = array(1 => 'User Filo', 122 => 'Admin Administrator');
    
    private static $data = null;
    
    public function __construct() {
        if (self::$data === NULL) {
            self::$data = array() + self::$DATA; // copy array
        }
    }
    
    /**
     * @GET
     */
    public function get_all() {
        return self::$data;
    }
    
    /**
     * @POST
     */
    public function add($data) {
        if (!isset($data['id']) || !isset($data['name'])) {
            return ResponseBuilder::bad_request();
        }
        self::$data[$data['id']] = $data['name'];
        return ResponseBuilder::ok();
    }
    
    /**
     * @POST
     * @Path(/multiple)
     */
    public function addMultiple($data) {
        if (!is_array($data)) {
            return ResponseBuilder::bad_request(print_r($data, FALSE));
        }
        foreach ($data as $d) {
            self::$data[$d['id']] = $d['name'];
        }
        return ResponseBuilder::ok();
    }
    
    /**
     * @PUT
     */
    public function edit($data) {
        if (!isset($data['id']) || !isset($data['name'])) {
            return ResponseBuilder::bad_request();
        }
        if (!array_key_exists($data['id'], self::$data)) {
            return ResponseBuilder::not_found();
        }
        self::$data[$data['id']] = $data['name'];
        return ResponseBuilder::ok(array(
            'id' => $data['id'],
            'name' => self::$data[$data['id']]
        ));
    }
    
    /**
     * @GET
     * @Path(/{id})
     * @Produces(text/plain)
     */
    public function get_item($id) {
        if (array_key_exists($id, self::$data)) {
            return ResponseBuilder::ok(self::$data[$id]);
        }
        return ResponseBuilder::not_found();
    }
    
    /**
     * @DELETE
     * @Path(/{id})
     */
    public function delete_item($id) {
        if (array_key_exists($id, self::$data)) {
            unset(self::$data[$id]);
            return ResponseBuilder::ok();
        }
        return ResponseBuilder::not_found();
    }
    
    /**
     * @GET
     * @Path(/count)
     * @Produces(text/plain)
     */
    public function count() {
        return ResponseBuilder::ok(count(self::$data));
    }
    
}

/**
 * @Consumes(application/json)
 * @Produces(text/html)
 */
class Example2Endpoint {
    
    /**
     * @GET
     * @Consumes(text/plain)
     * @Produces(application/json)
     */
    public function get_all($text) {
        return array($text, 'a', 'b', 'c');
    }
    
}

class ExampleTextSerializator implements serializator\ISerializator {
    
    public function marshall($object) {
        return strval($object);
    }

    public function unmarshall($object_as_str) {
        return $object_as_str;
    }

}
