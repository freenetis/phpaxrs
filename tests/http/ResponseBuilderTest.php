<?php

namespace phpaxrs\http;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-23 at 20:10:20.
 */
class ResponseBuilderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @covers phpaxrs\http\ResponseBuilder::body
     */
    public function testBody() {
        $rb = ResponseBuilder::create();
        $this->assertEquals('aaaBB', $rb->body('aaaBB')->build()->get_body());
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::header
     */
    public function testHeader() {
        $rb = ResponseBuilder::create();
        $rb->header('11', 'a');
        $rb->header('33', 'b');
        $rb->header('33', 'a');
        $r = $rb->body('aaaBB')->build();
        $this->assertEquals(2, count($r->get_headers()));
        $hds = $r->get_headers();
        $this->assertTrue(isset($hds['11']));
        $this->assertEquals('a', $hds['11']);
        $this->assertTrue(isset($hds['33']));
        $this->assertEquals('a', $hds['33']);
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::build
     */
    public function testBuild() {
        $rb = ResponseBuilder::create();
        $r = $rb->build();
        $this->assertNotNull($r);
        $this->assertTrue($r instanceof HttpResponse);
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::create
     */
    public function testCreate() {
        $r = ResponseBuilder::create()->build();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(200, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
        
        $r = ResponseBuilder::create(201)->build();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(201, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
        
        $r = ResponseBuilder::create(201, array(1 => 2))->build();
        $this->assertNotNull($r);
        $this->assertEquals(array(1 => 2), $r->get_body());
        $this->assertEquals(201, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
        
        $r = ResponseBuilder::create(400, array(1 => 2))->build();
        $this->assertNotNull($r);
        $this->assertEquals(array(1 => 2), $r->get_body());
        $this->assertEquals(400, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
        
        $r = ResponseBuilder::create(400, 'aaa')->build();
        $this->assertNotNull($r);
        $this->assertEquals('aaa', $r->get_body());
        $this->assertEquals(400, $r->get_status());
        $this->assertEquals(1, count($r->get_headers()));
        $this->assertTrue($r->has_header('Content-Type'));
        $hds = $r->get_headers();
        $this->assertEquals('text/plain', $hds['Content-Type']);
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::ok
     */
    public function testOk() {
        $r = ResponseBuilder::ok();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(200, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
        
        $r = ResponseBuilder::ok(array(1 => 'a'));
        $this->assertNotNull($r);
        $this->assertEquals(array(1 => 'a'), $r->get_body());
        $this->assertEquals(200, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::created
     */
    public function testCreated() {
        $r = ResponseBuilder::created();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(201, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
        
        $r = ResponseBuilder::created('http://example.com/1');
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(201, $r->get_status());
        $this->assertEquals(1, count($r->get_headers()));
        $this->assertTrue($r->has_header('Location'));
        $hds = $r->get_headers();
        $this->assertEquals('http://example.com/1', $hds['Location']);
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::no_content
     */
    public function testNo_content() {
        $r = ResponseBuilder::no_content();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(204, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::bad_request
     */
    public function testBad_request() {
        $r = ResponseBuilder::bad_request();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(400, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
        
        $r = ResponseBuilder::bad_request('aaa');
        $this->assertNotNull($r);
        $this->assertEquals('aaa', $r->get_body());
        $this->assertEquals(400, $r->get_status());
        $this->assertEquals(1, count($r->get_headers()));
        $this->assertTrue($r->has_header('Content-Type'));
        $hds = $r->get_headers();
        $this->assertEquals('text/plain', $hds['Content-Type']);
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::not_found
     */
    public function testNot_found() {
        $r = ResponseBuilder::not_found();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(404, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
        
        $r = ResponseBuilder::not_found('aaa');
        $this->assertNotNull($r);
        $this->assertEquals('aaa', $r->get_body());
        $this->assertEquals(404, $r->get_status());
        $this->assertEquals(1, count($r->get_headers()));
        $this->assertTrue($r->has_header('Content-Type'));
        $hds = $r->get_headers();
        $this->assertEquals('text/plain', $hds['Content-Type']);
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::not_acceptable
     */
    public function testNot_acceptable() {
        $r = ResponseBuilder::not_acceptable();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(406, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::unsupported_media
     */
    public function testUnsupported_media() {
        $r = ResponseBuilder::unsupported_media();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(415, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
    }

    /**
     * @covers phpaxrs\http\ResponseBuilder::server_error
     */
    public function testServer_error() {
        $r = ResponseBuilder::server_error();
        $this->assertNotNull($r);
        $this->assertNull($r->get_body());
        $this->assertEquals(500, $r->get_status());
        $this->assertEquals(0, count($r->get_headers()));
        
        $r = ResponseBuilder::server_error('aaa');
        $this->assertNotNull($r);
        $this->assertEquals('aaa', $r->get_body());
        $this->assertEquals(500, $r->get_status());
        $this->assertEquals(1, count($r->get_headers()));
        $this->assertTrue($r->has_header('Content-Type'));
        $hds = $r->get_headers();
        $this->assertEquals('text/plain', $hds['Content-Type']);
        
        $r = ResponseBuilder::server_error(new \Exception('aaa'));
        $this->assertNotNull($r);
        $this->assertEquals('aaa', $r->get_body());
        $this->assertEquals(500, $r->get_status());
        $this->assertEquals(1, count($r->get_headers()));
        $this->assertTrue($r->has_header('Content-Type'));
        $hds = $r->get_headers();
        $this->assertEquals('text/plain', $hds['Content-Type']);
    }

}
