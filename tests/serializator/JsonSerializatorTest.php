<?php
/*
 * This file is a part of PHPAX-RS framework, released under terms of GPL-3.0
 * licence. Copyright (c) 2014, UnArt, o.s. All rights reserved.
 */

namespace phpaxrs\serializator;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-07 at 07:40:15.
 */
class JsonSerializatorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var JsonSerializator
     */
    protected $object;
    
    protected function setUp() {
        $this->object = new JsonSerializator;
    }
    
    protected function tearDown() {
    }
    
    public function providerTestMarshall() {
        $obj = new \stdClass();
        $obj->a = 12;
        $obj->bb = 'a';
        return array(
            array(NULL, NULL, TRUE),
            array(FALSE, NULL, TRUE),
            array(TRUE, NULL, TRUE),
            array('', NULL, TRUE),
            array('true', NULL, TRUE),
            array('a', NULL, TRUE),
            array('{', NULL, TRUE),
            array(1, NULL, TRUE),
            array(1.2, NULL, TRUE),
            array(array(), '[]', FALSE),
            array(array('a'), '["a"]', FALSE),
            array(array('a', 'b'), '["a","b"]', FALSE),
            array(array('a' => 'b'), '{"a":"b"}', FALSE),
            array(array('a' => 'b', 'c' => 12), '{"a":"b","c":12}', FALSE),
            array($obj, '{"a":12,"bb":"a"}', FALSE),
        );
    }
    
    /**
     * @covers phpaxrs\serializator\JsonSerializator::marshall
     * @dataProvider providerTestMarshall
     */
    public function testMarshall($object, $exp_str, $ex = FALSE) {
        try {
            $str = $this->object->marshall($object);
            if ($ex) $this->fail('ser. ex. expected');
            $this->assertEquals($exp_str, $str);
        } catch (SerializationException $e) {
            $this->assertTrue($ex, 'ser. ex. not expected');
        }
    }
    
    public function providerTestUnmarshall() {
        return array(
            array(array(), NULL, TRUE),
            array(new \stdClass(), NULL, TRUE),
            array('', NULL, TRUE),
            array('true', TRUE, FALSE),
            array('tru', NULL, TRUE),
            array('a', NULL, TRUE),
            array('{', NULL, TRUE),
            array(1, NULL, TRUE),
            array(1.2, NULL, TRUE),
            array('{}', array(), FALSE),
            array('["a"]', array('a'), FALSE),
            array('["a","b"]', array('a', 'b'), FALSE),
            array('{"a":"b"}', array('a' => 'b'), FALSE),
            array('{"a":"b","c":12}', array('a' => 'b', 'c' => 12), FALSE),
        );
    }

    /**
     * @covers phpaxrs\serializator\JsonSerializator::unmarshall
     * @dataProvider providerTestUnmarshall
     */
    public function testUnmarshall($str, $exp_obj, $ex = FALSE) {
        try {
            $obj = $this->object->unmarshall($str);
            if ($ex) $this->fail('ser. ex. expected');
            $this->assertEquals($exp_obj, $obj);
        } catch (SerializationException $e) {
            $this->assertTrue($ex, 'ser. ex. not expected');
        }
    }

}
